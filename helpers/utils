#!/usr/bin/env bash

# Set to true if cleaning process
declare CLEANING_UP=false

# Set true if hook script is used
declare HOOK_USED=false
# Hook variables setted if hook is used
declare HOOK_SCRIPT=""
declare HOOK_ACTION=""

### FUNCTION BEGIN
# Convert size in bytes in human readable size KiB, MiB, GiB...
# ARGUMENTS: 
# 	$1 (integer) value in bytes
# OUTPUTS: 
# 	Prints value to stdout
### FUNCTION END
hrb() {
    local bytes="$1"
    numfmt --to=iec-i --suffix=O --format="%9.2f" "$bytes" | sed s/' '//g
}


### FUNCTION BEGIN
# Convert size in human readable size KiO, MiO, GiO to size in bytes numerical ...
# ARGUMENTS: 
# 	$1 (string) size in bytes , kiB, ...
# OUTPUTS: 
# 	Writes String to STDOUT
### FUNCTION END
bhr() {
    local humanBytes="${1//\./,}i"
    numfmt --from=iec-i "$humanBytes"
}


### FUNCTION BEGIN
# launch cleanup process
# GLOBALS: 
# 	CLEANING_UP
#   HOOK_USED
# RETURNS:
#   0 on sucess, non zero otherwise
### FUNCTION END
cleanup() {
    if $CLEANING_UP; then
        return 0
    fi
    CLEANING_UP=true

    local error=false

    # Delete tmp files
    rm -rf "${TMP_DIR}"

    if [[ $(type -t cleanup_method) == function ]]; then
        if ! cleanup_method; then
            log "Error while executing cleanup" error
            error=true
        fi
    fi

    if $HOOK_USED; then
        if ! _launch_hook "${HOOK_SCRIPT}" after "${HOOK_ACTION}"; then
            log "Error when executing after hook '${HOOK_SCRIPT}'"
            error=true
        fi
    fi

    if $error; then
        return 1
    else
        return 0
    fi
}


### FUNCTION BEGIN
# Exit script with cleaning up correctly
# ARGUMENTS: 
# 	$1 (string) message to print
#   $2 (integer-optionnal) return code if not use 1 value
# OUTPUTS: 
# 	Call log to print message
# RETURNS:
#   exit script with $2 code
### FUNCTION END
abord() {
    local message=$1
    local -i exit_code=${2:-1}
    log "$message" error
    cleanup
    exit $exit_code
}


_launch_hook() {
    local script_file="$1"
    local hook="$2" # before | after
    local action="$3" # backup | restore

    if [[ ! -f $script_file || ! -x $script_file  ]]; then
        abord "Hook file '$script_file' is not an executable file !"
    fi
    log "Launch hook ${hook} ${action} '${script_file}'" verbose
    if ! log_cmd "${script_file}" "${hook}" "${action}" "${ARGS[@]}"; then
        return 1
    fi
}


init_hook() {
    # Avoid calling init_hook multiple times
    if $HOOK_USED; then
        return 0
    fi

    HOOK_SCRIPT="$1"
    HOOK_ACTION="$2"

    if ! _launch_hook "${HOOK_SCRIPT}" before "${HOOK_ACTION}"; then
        abord "Error when executing before hook '${HOOK_SCRIPT}'"
    fi
    HOOK_USED=true

    return 0
}
