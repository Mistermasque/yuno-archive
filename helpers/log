#!/usr/bin/env bash

# Contain log file path. If not defined, no log wil be printed inside file
LOG_FILE=""
# If quiet, no messages will be print on screen (but will be print inside log file)
LOG_QUIET=false
# If verbose, all messages will be printed
LOG_VERBOSE=false


log_init() {
    # shellcheck disable=SC2034
    local -A args_array=( [l]=log= [q]=quiet [v]=verbose )
    local log=""
    local quiet=0
    local verbose=0
    handle_getopts_args "$@"

    if [[ -n $log ]]; then
        LOG_FILE=$(realpath "${log}")
        local log_dir
        log_dir=$(dirname "$LOG_FILE")
        mkdir -p "$log_dir"
    fi

    if [[ $quiet == 1 ]]; then
        LOG_QUIET=true
    fi

    if [[ $verbose == 1 ]]; then
        LOG_VERBOSE=true
    fi
}

### FUNCTION BEGIN
# Message function
# Print on stdout/stderr if LOG_QUIET is true (see logQuiet)
# Print in log file if LOG_FILE is set (see setLogFile)
# GLOBALS: 
# 	LOG_FILE
# ARGUMENTS: 
#   $1 (string) message to print
#   $2 message type success|error|warning|verbose|info|<null>
# OUTPUTS: 
# 	Writes log to stdout or stderr (if type error)
### FUNCTION END
log() {
    local message="$1"
    local type="${2-}"
    local log_prefix=''
    local screen_prefix=''
    local screen_color='\e[0m'
    local screen_reset_color='\e[0m'
    
    case "${type}" in
        'success')
            log_prefix="[OK] "
            screen_prefix="✅ "
            # green
            screen_color="\e[32m"
        ;;
        'error')
            log_prefix="[ERROR] "
            screen_prefix="❌ "
            # red
            screen_color="\e[31m"
        ;;
        'warning')
            log_prefix="[WARN] "
            screen_prefix="⚠️  "
            # brown
            screen_color="\e[33m"
        ;;
        'info')
            log_prefix="[INFO] "
            # Light blue
            screen_color="\e[36m"
        ;;
    esac

    local now
    now="$(date "+%Y-%m-%d %H:%M:%S") "
    local log_msg
    log_msg=$(printf '%s%s%s\n' "$now" "$log_prefix" "$message")

    if [[ $type == 'verbose' && $LOG_VERBOSE == false ]]; then
        return 0
    fi

    if [[ -n "$LOG_FILE" ]]; then
        echo "$log_msg" >> "$LOG_FILE"
    fi

    if $LOG_QUIET; then
        return 0
    fi

    if [[ $type == 'error' ]]; then
        echo -e "${screen_prefix}${screen_color}${message}${screen_reset_color}" >&2
    else
        echo -e "${screen_prefix}${screen_color}${message}${screen_reset_color}"
    fi
}

log_cmd() {
    log "$*" verbose
    if [[ -n "$LOG_FILE" ]]; then
        if $LOG_QUIET; then
            "$@" >> "$LOG_FILE" 2>&1
        else
            "$@" | tee -a "$LOG_FILE" 2>&1
        fi
    else
        if $LOG_QUIET; then
            "$@" >> /dev/null 2>&1
        else
            "$@"
        fi
    fi
    return $?
}


